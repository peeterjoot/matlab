%disableTrace() ;
%enableTrace() ;

A = [ 1 2 ; 2 1 ] ;
b1 = [ 1 ; 2 ] ;
b2 = [ 1 ; 0 ] ;
b3 = [ 0 ; 2 ] ;
P = eye( 2 ) ;

A\b1
x = conjugateGradientWithPreconditioner( A, b1, P, eps * 100 )

A\b2
x = conjugateGradientWithPreconditioner( A, b2, P, eps * 100 )

A\b3
x = conjugateGradientWithPreconditioner( A, b3, P, eps * 100 )

clear all ;

A = [ 1 2 3 ; 2 0 1 ; 3 1 5 ] ;
b1 = [ 1 ; 2 ; 3 ] ;
b2 = [ 1 ; 0 ; 3 ] ;
b3 = [ 0 ; 2 ; 3 ] ;
P = eye( 3 ) ;

A\b1
x = conjugateGradientWithPreconditioner( A, b1, P, eps * 100 )

A\b2
x = conjugateGradientWithPreconditioner( A, b2, P, eps * 100 )

A\b3
x = conjugateGradientWithPreconditioner( A, b3, P, eps * 100 )

clear all ;
enableTrace() ;

N = 5 ;
A = rand( N, N ) ;
A = A + A.' ;
b = rand( N, 1 ) ;
P = zeros( N ) ;

% is there a vectorized syntax for this assignment?
for d = [1 : N]
   P( d, d ) = A( d, d ) ;
end

A\b

z = conjugateGradient( A, b, [], eps * 100 ) ;
w = conjugateGradient( A, b, P, eps * 100 ) ;

%y = conjugateGradientWithPreconditioner( A, b, P, eps * 100 )
