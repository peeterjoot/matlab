# generate this sort of template with:
# ~/bin/mtcheck */*.m | tee x ; # say

sub matlabMeta
{
my @matlab =
(
{
   DATE => 'Nov 2, 2014',
   path => 'ece1254/ps1/backSubst.m',
   WHAT => qq(backSubst performs a back substitution returning x for the system U x = b, where U is upper triangular and has no zeros on the diagonal.)
},
{
   DATE => 'Oct 11, 2014',
   path => 'ece1254/ps1/changeDebug.m',
   WHAT => qq(enable or disable trace)
},
{
   DATE => 'Oct 11, 2014',
   path => 'ece1254/ps1/changeTrace.m',
   WHAT => qq(enable or disable trace)
},
{
   DATE => 'Oct 11, 2014',
   path => 'ece1254/ps1/disableDebug.m',
   WHAT => qq(disable debug mode.  This sets a global debug variable to zero so that calls to trace don't print anything.)
},
{
   DATE => 'Oct 11, 2014',
   path => 'ece1254/ps1/disableTrace.m',
   WHAT => qq(disable debug tracing.
Sets a global trace variable to zero so that calls to trace don't print anything.
)
},
{
   DATE => 'Oct 11, 2014',
   path => 'ece1254/ps1/enableDebug.m',
   WHAT => qq(
enable debug mode.
Sets a global debug variable to non-zero so that calls to verify( ... ) don't print anything.)
},
{
   DATE => 'Oct 11, 2014',
   path => 'ece1254/ps1/enableTrace.m',
   WHAT => qq(enable debug tracing.
Sets a global trace variable to non-zero so that calls to trace( ... ) don't print anything.)
},
{
   DATE => 'Oct 11, 2014',
   path => 'ece1254/ps1/findMaxIndexOfColumnMatrix.m',
   WHAT => qq(findMaxIndexOfColumnMatrix finds the index of the pivot element, the element with the biggest absolute value.)
},
{
   DATE => 'Nov 2, 2014',
   path => 'ece1254/ps1/forwardSubst.m',
   WHAT => qq(forwardSubst performs a back substitution returning x for the system L x = b, where L is lower triangular and has no zeros on the diagonal.)
},
{
   DATE => 'Oct 14, 2014',
   path => 'ece1254/ps1/generateHeatNetlist.m',
   WHAT => qq(A small Matlab function that generates a netlist for the heat network in ps1 p3a.)
},
{
   DATE => 'Oct 14, 2014',
   path => 'ece1254/ps1/generateResistorGridNetlist.m',
   WHAT => qq(a small Matlab function that generates a netlist for a network made by:
N x N square grid of resistors of value R, where N is the number of...)
},
{
   DATE => 'Oct 11, 2014',
   path => 'ece1254/ps1/isDebugEnabled.m',
   WHAT => qq(check if debug mode is enabled.  If neither enableDebug nor disableDebug has been called, this 
disable debug modes.)
},
{
   DATE => 'Oct 14, 2014',
   path => 'ece1254/ps1/NodalAnalysis.m',
   WHAT => qq(NodalAnalysis generates the MNA, modified nodal analysis, equations from a text file.)
},
{
   DATE => 'Nov 2, 2014',
   path => 'ece1254/ps1/noPivotLU.m',
   WHAT => qq(noPivotLU performs a, not in place, LU factorization of the input matrix, producing the factors: M = L U,
where L and U are lower and upper triangular respectively.)
},
{
   DATE => 'Oct 14, 2014',
   path => 'ece1254/ps1/plotHeatQ.m',
   WHAT => qq(plot the netlist results for ps1 p3b, and p3d.)
},
{
   DATE => 'Oct 14, 2014',
   path => 'ece1254/ps1/problem2driver.m',
   WHAT => qq(driver for ps1 problem 2, part a and b.)
},
{
   DATE => 'Oct 14, 2014',
   path => 'ece1254/ps1/ps1d.m',
   WHAT => qq(driver that calculates an LU factorization based solution for ps3.p1, and compares to the direct Matlab solution)
},
{
   DATE => 'Oct 11, 2014',
   path => 'ece1254/ps1/tests/fit.m',
   WHAT => qq(polynomial fitting experimental code)
},
{
   DATE => 'Oct 11, 2014',
   path => 'ece1254/ps1/tests/verifyUpperTriangular.m',
   WHAT => qq(unit tests for verifyUpperTriangular function)
},
{
   DATE => 'Oct 11, 2014',
   path => 'ece1254/ps1/tests/withPivotLU.m',
   WHAT => qq(unit tests for withPivotLU function)
},
{
   DATE => 'Oct 11, 2014',
   path => 'ece1254/ps1/trace.m',
   WHAT => qq(trace a string.  If enableTrace has been called, and disableTrace has not, then the value of the string will be printed following a 'debug: ' prefix.)
},
{
   DATE => 'Oct 11, 2014',
   path => 'ece1254/ps1/verifyUpperTriangular.m',
   WHAT => qq(verifyUpperTriangular produces an error if the matrix U is not upper triangular within precision epsilon.)
},
{
   DATE => 'Oct 14, 2014',
   path => 'ece1254/ps1/withPivotLU.m',
   WHAT => qq(withPivotLU performs a not in place LU factorization of the input matrix, producing the factors: M = L U, where L' = P L and U are lower and upper triangular respectively, and P is a permutation matrix.)
},
{
   DATE => 'Nov 2, 2014',
   path => 'ece1254/ps2a/compareBD.m',
   WHAT => qq(compare the solutions for the transformed and original circuits of ps2 parts b and d.)
},
{
   DATE => 'Oct 31, 2014',
   path => 'ece1254/ps2a/conjgrad.m',
   WHAT => qq(A conjugate gradient implementation taken directly from 'Numerical Mathematics')
},
{
   DATE => 'Nov 2, 2014',
   path => 'ece1254/ps2a/conjugateGradientPainlessB2.m',
   WHAT => qq(A conjugate gradient implementation based on the pseudocode algorithm from Shewchuk's
"An Introduction to the Conjugate Gradient Method Without the Agonizing Pain" appendix B.2)
},
{
   DATE => 'Oct 31, 2014',
   path => 'ece1254/ps2a/conjugateGradientPainlessB3.m',
   WHAT => qq(A conjugate gradient implementation based on the pseudocode algorithm from Shewchuk's
"An Introduction to the Conjugate Gradient Method Without the Agonizing Pain" appendix B.3)
},
{
   DATE => 'Nov 2, 2014',
   path => 'ece1254/ps2a/conjugateGradientQuarteroniPrecond.m',
   WHAT => qq(A conjugate gradient implementation with preconditioning based on the algorithm from
the algorithm in Quarteroni, et al's "Numerical Mathematics")
},
{
   DATE => 'Nov 2, 2014',
   path => 'ece1254/ps2a/generateNodalEquationsPartEH.m',
   WHAT => qq(Generate the modified nodal analysis equations G x = b, for the grid specified in ps2 problem 1 part a)
},
{
   DATE => 'Nov 2, 2014',
   path => 'ece1254/ps2a/generateResistorGridNetlist.m',
   WHAT => qq(Generate a resistor grid network for the problem of ps2a.  Relative to the network of the previous problem set, this one has a resistance from each node to ground, and also has a series resistance on the voltage source to ground.  An option to use a Norton equivalent current source for the voltage source is also provided, which allows the MNA matrix to be symmetric, which in turn allows CG methods to be used to solve)
},
{
   DATE => 'Oct 29, 2014',
   path => 'ece1254/ps2a/NodalAnalysis.m',
   WHAT => qq(Based on NodalAnalysis.m from ps1, but generalized to allow alphanumeric labels)
},
{
   DATE => 'Nov 2, 2014',
   path => 'ece1254/ps2a/partEcollectTimings.m',
   WHAT => qq(collect and plot timing info for all the different solution methods: CG, LU, ...)
},
{
   DATE => 'Nov 2, 2014',
   path => 'ece1254/ps2a/partH.m',
   WHAT => qq(collect timing data for each of the part e solution methods with and without preconditioning, and optionally plotting the Gershgorin circles)
},
{
   DATE => 'Nov 2, 2014',
   path => 'ece1254/ps2a/tests/lutest.m',
   WHAT => qq(test driver to try Matlab builtin lu function.)
},
{
   DATE => 'Nov 2, 2014',
   path => 'ece1254/ps2a/tridiagonal.m',
   WHAT => qq(extract just the tridiagonal subset of the matrix a, returning the result in sparse form)
},
{
   DATE => 'Nov 2, 2014',
   path => 'ece1254/ps2a/usenetlistProblemBD.m',
   WHAT => qq(Solve the ps2a netlist with various methods)
},
{
   DATE => 'Nov 9, 2014',
   path => 'ece1254/ps2b/countItersAndPlot.m',
   WHAT => qq(count the Newton's method iterations required to solve the ps2b diffusion problem 2.)
},
{
   DATE => 'Nov 3, 2014',
   path => 'ece1254/ps2b/ddiode.m',
   WHAT => qq(derivative of the diode Newton's method function for ps2b problem 1.)
},
{
   DATE => 'Nov 3, 2014',
   path => 'ece1254/ps2b/diode.m',
   WHAT => qq(The diode Newton's method function for ps2b problem 1.)
},
{
   DATE => 'Nov 2, 2014',
   path => 'ece1254/ps2b/dplot.m',
   WHAT => qq(Attempt to plot the diode function with Matlab.  Gave up and plotted it with Mathematica instead.)
},
{
   DATE => 'Nov 9, 2014',
   path => 'ece1254/ps2b/newtonsDiffusion.m',
   WHAT => qq(Implementation of Newton's method with and without stepping and damping for problem 2 of ps2b.)
},
{
   DATE => 'Nov 4, 2014',
   path => 'ece1254/ps2b/newtonsDiode.m',
   WHAT => qq(Implementation of Newton's method with and without stepping for problem 1 of ps2b.)
},
{
   DATE => 'Nov 5, 2014',
   path => 'ece1254/ps2b/newtonsSquareroot.m',
   WHAT => qq(Reference implementation of Newton's method for a square root computation.)
},
{
   DATE => 'Nov 9, 2014',
   path => 'ece1254/ps2b/quadraticDifferences.m',
   WHAT => qq(Demonstrate quadratic convergence for the multivariable Newton's method of ps2b problem 2.)
},
{
   DATE => 'Nov 19, 2014',
   path => 'ece1254/ps3a/NodalAnalysis.m',
   WHAT => qq(Generate MNA equations for systems that also include inductors and capacitors)
},
{
   DATE => 'Nov 19, 2014',
   path => 'ece1254/ps3a/tests/nat.m',
   WHAT => qq(test cases for NodalAnalysis.m)
},
) ; # @matlab

   return @matlab ;
}

1 ;
